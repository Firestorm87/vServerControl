<ScrollView ux:Class="Serverliste" SnapMinTransform="false">

	<JavaScript>
		var Direktor = require('Direktor');
		var Observable = require("FuseJS/Observable");
		var ModalJS = require('ModalJS');
		var Navigation = require("Navigation");
		var UIBlocker = require("UIBlocker");
		var UserSession = require("UserSession");

		var isRefreshing = Observable(false);
		var servers = Observable(new Object());
		servers.value.serverArray = Observable();

		var activateServerlist = function() {
			readServerlistImpl(false);
			UIBlocker.unblock();
		}

		var isServerListeEquals = function(pObservable, pArray2) {
			if(pObservable.length != pArray2.length){
				return false;
			}
			for (var i = pObservable.length - 1; i >= 0; i--) {
				if(pObservable.getAt(i).nameWithNickname.value != pArray2[i].nameWithNickname.value){
					return false;
				}
			}
			return true;
		}


		var readServerlistImpl = function(pRefresh) {
			setLoadStatus(true, pRefresh);
			Direktor.getServerliste(pRefresh).then(function(response) {
				if(!isServerListeEquals(servers.value.serverArray, response)) {
					servers.value.serverArray.replaceAll(response);
				}
				setLoadStatus(false, pRefresh);
			}).catch(function(err) {
				setLoadStatus(false, pRefresh);
				console.log(err.stack);
				ModalJS.showModal(
					"Fehler beim Lesen der ServerListe",
					err.toString(),
					["OK"],
					function (action) {
						Navigation.navigateToLogin();
					});
	        });
		};
		var openServerdetail = function(pSender) {
			UserSession.selectedServer.value = pSender.data;
			Navigation.navigateToServerdetail();
		}

		var setLoadStatus = function(pStart, pRefresh) {
			if(pStart){
				if(pRefresh){
					isRefreshing.value = true;
				} else {
					UIBlocker.block();
				}
			} else {
				if(pRefresh){
					isRefreshing.value = false;
				} else {
					UIBlocker.unblock();
				}
			}
		}

		module.exports = {
			activateServerlist: activateServerlist,
			isRefreshing: isRefreshing,
			openServerdetail: openServerdetail,
			refresh: function() { readServerlistImpl(true); },
			servers: servers
		};
	</JavaScript>
	
	<WhileActive>
		<Callback Handler="{activateServerlist}"/>
		<Change serverListeContent.Visibility="Visible"/>
    </WhileActive>

	<DockPanel ux:Name="serverListeContent" Visibility="Collapsed">
		<CogWheelReload Dock="Top" Text="Pull to Reload" />
		<StackPanel>
			<WhileEmpty Items="{servers.serverArray}">
			    <Text Margin="0,15,0,15">Keine Server gefunden!</Text>
				<HorizontalBar />
			</WhileEmpty>
			<Each Items="{servers.serverArray}">
				<Panel ux:Name="serverPanel" Padding="15,15,15,15">
					<Text Value="{nameWithNickname}" />
					<Clicked>
				        <Callback Handler="{openServerdetail}"/>
				    </Clicked>
				    <WhilePressed>
				        <Scale Target="serverPanel" Factor="0.95" Duration="0.05"/>
				    </WhilePressed>
				</Panel>
				<HorizontalBar />
	        </Each>
		</StackPanel>
    </DockPanel>
    
</ScrollView>