<ScrollView ux:Class="Serverdetail" SnapMinTransform="false">

	<JavaScript>
		var Direktor = require('Direktor');
		var Observable = require("FuseJS/Observable");
		var ModalJS = require('ModalJS');
		var Navigation = require("Navigation");
		var UIBlocker = require("UIBlocker");
		var UserSession = require("UserSession");

		var isRefreshing = Observable(false);

		var server = Observable();
		var serverDetailVisible = Observable("Collapsed");
		var serverOfflineVisible = Observable("Collapsed");
		var serverOnlineVisible = Observable("Collapsed");

		var serverObserver = function() {
			if(server.value){
				serverDetailVisible.value="Visible";
			} else {
				serverDetailVisible.value="Collapsed";
			}
		};

		var serverStatusObserver = function() {
			if (server.value) {
				if(server.value.status.value == "offline"){
					serverOnlineVisible.value="Collapsed";
					serverOfflineVisible.value="Visible";
				} else {
					// Online
					serverOnlineVisible.value="Visible";
					serverOfflineVisible.value="Collapsed";
				}
			}	
		};
		
		server.addSubscriber(serverObserver);
		if(UserSession.selectedServer.value) {
			server.value = UserSession.selectedServer.value;
		}
		UserSession.selectedServer.addSubscriber(function() {
			if(server.value) {
				server.value.status.removeSubscriber(serverStatusObserver);
			}
			server.value = UserSession.selectedServer.value;
			if(server.value) {
				server.value.status.addSubscriber(serverStatusObserver);
			}
		});

		var activateServerdetail = function() {
			readServerImpl(false);
			UIBlocker.unblock();
		}

		var readServerImpl = function(pRefresh) {
			setLoadStatus(true, pRefresh);
			var lServer = UserSession.selectedServer.value;
			Direktor.readServer(lServer, pRefresh).then(function(response) {
				setLoadStatus(false, pRefresh);
			}).catch(function(err) {
				setLoadStatus(false, pRefresh);
				ModalJS.showModal(
					"Fehler beim Lesen der Server-Daten",
					err.toString(),
					["OK"],
					function (action) {
						Navigation.navigateToLogin();
					});
	        });
		};

		var setLoadStatus = function(pStart, pRefresh) {
			if(pStart){
				if(pRefresh) {
					isRefreshing.value = true;
				} else {
					UIBlocker.block();
				}
			} else {
				if(pRefresh){
					isRefreshing.value = false;
				} else {
					UIBlocker.unblock();
				}
			}
		}

		module.exports = {
			activateServerdetail: activateServerdetail,
			isRefreshing: isRefreshing,
			navigateToServerliste: Navigation.navigateToServerliste,
			powerOffServer: function(){ Direktor.powerOffServer(UserSession.selectedServer.value); },
			refresh: function(){ readServerImpl(true); },
			resetServer: function(){ Direktor.resetServer(UserSession.selectedServer.value); },
			restartServer: function(){ Direktor.restartServer(UserSession.selectedServer.value); },
			server: UserSession.selectedServer,
			serverDetailVisible: serverDetailVisible,
			serverOfflineVisible: serverOfflineVisible,
			serverOnlineVisible: serverOnlineVisible,
			startServer: function(){ Direktor.startServer(UserSession.selectedServer.value); },
			stopServer: function(){ Direktor.stopServer(UserSession.selectedServer.value); }
		};
	</JavaScript>

	<WhileActive>
		<Callback Handler="{activateServerdetail}"/>
		<Change serverContent.Visibility="Visible"/>
    </WhileActive>

    <OnBackButton>
		<DebugAction Message="BackButton pressed" />
		<Clicked Handler="{navigateToServerliste}" />
	</OnBackButton>
	
	<DockPanel ux:Name="serverContent" Visibility="Collapsed">
		<CogWheelReload Dock="Top" Text="Pull to Reload" />
		<StackPanel Margin="15">
			<WhileEmpty Items="{server}">
			    <Text Margin="0,15,0,15" TextColor="#FF0000">Keine Server ausgew√§hlt!</Text>
			</WhileEmpty>
			<Select Data="{server}">
				<StackPanel Visibility="{serverDetailVisible}">
					<Grid RowCount="6" ColumnCount="2" Columns="auto,1*" Rows="auto,auto,auto,auto,auto,auto" >
						<Text Value="Name: " Margin="0,10,0,0" />
						<Text Value="{name}" Margin="0,10,0,0" />
						<Text Value="Alias: " Margin="0,10,0,0" />
						<Text Value="{nickname}" Margin="0,10,0,0" />
						<Text Value="IPs: " Margin="0,10,0,0" />
						<Text Value="{ipsString}" Margin="0,10,0,0" />
						<Text Value="Status: " Margin="0,10,0,0" />
						<Text Value="{status}" Margin="0,10,0,0" />
						<Text Value="Traffic (Monat): " Margin="0,10,0,0" />
						<Text Value="{traffic.monatString}" Margin="0,10,0,0" />
						<Text Value="Traffic (Tag): " Margin="0,10,0,0" />
						<Text Value="{traffic.tagString}" Margin="0,10,0,0" />
					</Grid>
					<StackPanel Orientation="Horizontal" Margin="0,25,0,0">
						<FaIconButton Icon="&#xf011;"  Text="Start" Width="120" Alignment="Center" TextAlignment="Left" Visibility="{serverOfflineVisible}" >
							<Clicked Handler="{startServer}" />
						</FaIconButton>
						<FaIconButton Icon="&#xf021;"  Text="Restart" Width="120" Alignment="Center" TextAlignment="Left" Visibility="{serverOnlineVisible}" >
							<Clicked Handler="{restartServer}" />
						</FaIconButton>
						<FaIconButton Icon="&#xf011;"  Text="PowerOff" Width="120" Alignment="Center" TextAlignment="Left" Visibility="{serverOnlineVisible}" >
							<Clicked Handler="{powerOffServer}" />
						</FaIconButton>
					</StackPanel>
					<StackPanel Orientation="Horizontal">
						<FaIconButton Icon="&#xf1da;"  Text="Reset" Width="120" Alignment="Center" TextAlignment="Left" Visibility="{serverOnlineVisible}" >
							<Clicked Handler="{resetServer}" />
						</FaIconButton>
						<FaIconButton Icon="&#xf28e;"  Text="Stop" Width="120" Alignment="Center" TextAlignment="Left" Visibility="{serverOnlineVisible}" >
							<Clicked Handler="{stopServer}" />
						</FaIconButton>
					</StackPanel>
				</StackPanel>
			</Select>
		</StackPanel>
    </DockPanel>
</ScrollView>